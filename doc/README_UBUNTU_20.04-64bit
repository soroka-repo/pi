
 Peter Soroka

 Ubuntu 20.04 64bit installation on a Raspberry PI 4 w/4G, 64G SD card and 1TB USB drive, with docker running HomeAssistant and Plex


# ___ get an id on hub.docker.com we will use the docker hub to push any changes we make to the images for backup
#     or use to update other pi(s) it's free

# ___ get an id on github.com it will be used to store yaml files so you can setup the docker containers on other pi(s)

# ___ write the ubuntu-20.04-preinstalled-server-amd64+raspi.img to the SD card

# ___ boot the SD username/password is ubuntu/ubuntu update to a strong password
      # SWITCH Desktops after you enter the the username click the gear in the lower left to choose the desktop
      # select xubuntu the other 2 (ubuntu and xfce) seem to get stuck with a blank screen

# ___ verify that you got a dhcp assigned IP addr
 ip addr;

# ___ update, upgrade and install
 sudo su;
 apt update;
 apt upgrade; ### upgrade may fail with a lock due to auto upgrade running just keep trying "apt update" until no further packages are 
              ### installed then run "apt upgrade" again

 apt install net-tools xubuntu-desktop; ### install xubuntu, I picked gdm3 (mistake) You should pick lightdm it uses less mem
 sudo apt-get install python3 python3-dev python3-venv python3-pip libffi-dev libssl-dev autoconf build-essential; ### install pre-reqa for home assistant
 reboot;

# ___ change the userid from ubuntu to your id, example will show userid "joeuser", this is for security the hackers will try "ubuntu"
 sudo su;
 cd /etc;
 for i in "passwd" "group" "shadow" "gshadow"; do sed 's/ubuntu/joeuser/g' -i $i; done;
 sed 's/Ubuntu/joeuser/g' -i /etc/passwd;
 mv /home/ubuntu /home/joeuser;
 reboot; ### just to make sure you did it correctly and we can still log on

# ___ set the IP address to static so it will always be the same, I have 2 networks one for wired and one for wireless
#     the raspberry PI is connected to both networks and the default gateway (routes) are set to work if either
#     network is down or both up
#
#
# list network interfaces of the PI
 ls /sys/class/net


# use netplan (see: man netplan) to configure the nework it will support all the possible network configurations that you can think of
# allow NetworkManager to manage netplan it works well with the extra networks docker will add


 sudo vi /etc/netplan/50-cloud-init.yaml; ### change it from: to: observing correct yaml column formatting

###from: this is the default
/etc/netplan$ cat 50-cloud-init.yaml 

network:
    ethernets:
        eth0:
            dhcp4: true
            optional: true
    version: 2

###to: this is what I have change the IPs addrs as needed, replace the XXXX.. in wlan0
#      change the mac address to your mac in the match this is here to make sure eth0 name got changed on boot
#      change the routes and nameserver ip from 192.168.1[0].1 to your correct gateway

network:
  version: 2
  renderer: NetworkManager
  ethernets:
    eth0:
      match:
        macaddress: dc:a6:32:XX:XX:XX
      addresses: [192.168.1.50/24]
      nameservers:
        addresses: [192.168.1.1,8.8.8.8]
      optional: true
      routes:
        - to: 0.0.0.0/0
          via: 192.168.1.1
          metric: 100
  wifis:
    wlan0:     
      dhcp4: no
      addresses: [192.168.0.50/24]
      nameservers:
        addresses: [192.168.0.1,8.8.8.8]
      optional: true
      access-points:
        "XXXX":
           password: "XXXXXXXXX"
      routes:
        - to: 0.0.0.0/0
          via: 192.168.0.1
          metric: 100

# create the file /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg
# with just the line network: {config: disabled}
# this is needed to keep the cloud config stuff from trying to reconfigure the network
#
  cat /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg 
network: {config: disabled}

# reboot and test your network



# ___ change the hostname from: ubuntu to: something meaningful to you, this is for security the hackers will look for hostname "ubuntu"
#     it will tell them right away what OS you are running
 hostnamectl set-hostname <new_host_name>;



# ___ install docker
 sudo su;
 apt install snap;
 snap install docker;

# ___ test docker install
 exit; ### exit from the sudo su root session, try the following commands from your userid not root
 systemctl status snap.docker.dockerd.service; ### check that docker is running
 docker --version; 
 docker-compose version;
 sudo docker run hello-world; ### get the docker hello-world image from docker hub and startup a container running it
 sudo docker images; ### list the docker image
 sudo docker ps -a; ### list the docker container (instance) of the docker image
 sudo docker stop <CONTAINER ID>; ### stop the runnning container with the ID from the "docker ps -a" command
 sudo docker rm <CONTAINER ID>; ### delete the container with the ID from the "docker ps -a" command
 sudo docker rmi hello-world; ### delete the hellow-world image (REPOSITARY) 
 

# ___ run Home Assistant, this is just the first attempt we need to build a app stack with docker-composre, lets just take a look...
 mkdir -p ~/HA; ### the tilda is your home directory or whereever you are going to put HA
 cd ~/HA;
 vi docker-compose.yml; ### create the following observing  yaml column formatting

 $ cat docker-compose.yml

version: '3'
services:
  homeassistant:
    container_name: home-assistant
    image: homeassistant/raspberrypi4-homeassistant:stable
    volumes:
      - /home/soroka/HA:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=America/New_York
    restart: always
    network_mode: host
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8123"]
      interval: 30s
      timeout: 10s
      retries: 3




 sudo docker-compose up -d; ### execute from the dir the above yaml file is in to start up the instance 

### to restart use:
  sudo docker-compose restart; ### to restart Home Assistant
### to rebuild:
  sudo docker-compose pull;
  sudo docker-compose up -d --build homeassistant


### to get to homeassistant your IP port 8123 (find your IP = ifconfig or ip addr)
 http://<your IP addr>:8123
#or
 http://127.0.0.1:8123 ### local ip
### create youre userid and password, select your map location,click in the notification tab to see if any Home devices were found and configure them. 


# ___ try a differeint level of home assistant moving from stable to latest and add portainer to view your docker images/instances with a GUI
 cd ~/HA/docker-build;
 sudo docker-compose stop; ### stop home assistant instance

   ### if you want a do-over do the next step rm for remove your instance and configuration file
    sudo docker-compose rm; ### remove the home assistant instance, this will also delete the HA /config files
                         ### DO NOT DO the rm command unless you want to start over

 vi docker-compose.yml; ### change the following stable to latest observing the yaml column formatting add portainer

 $ cat docker-compose.yml

version: '3'
services:
  homeassistant:
    container_name: home-assistant
    image: homeassistant/raspberrypi4-homeassistant:latest
    volumes:
      - /home/soroka/HA:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=America/New_York
    restart: always
    network_mode: host
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8123"]
      interval: 30s
      timeout: 10s
      retries: 3

  portainer:
    container_name: portainer
    image: portainer/portainer
    ports:
      - 9000:9000
    volumes:
      - /home/soroka/portainer:/data:rw
      - /var/run/docker.sock:/var/run/docker.sock
    restart: "always"



### rebuild and start up the image 
 sudo docker-compose pull;
 sudo docker-compose up -d --build homeassistant;

# ___ portlander is a gui to view your docker status use a webbrowser to get to port 9000 and setup a userid/password
#
#










# UB 20.04 DEBUGGING ERRORS on the PI-4 4g mem
# Do each of the following steps to correct problems with the PI-4 running UB 20.04


### DEBUGGING: conserve mem
## ___ install google chromium, chromium uses about 10M per tab compared firefox 100M / tab of mem usage
 sudo apt update;
 sudo apt install chromium-browser;




### DEBUGGING: DT hang and conserve mem  
# ___ xubuntu running gdm3 is hanging or going blank when running gdm3
# switch the desktop from gdm3 to lightdm the xubuntu desktp keeps freezing when you leave it inactive????
#recover from a hung desktop
 <ctrl><alt>f3
 login and run
 sudo systemctl restart gdm
 <ctrl><alt>f1 ### to log back into the gui

# FIXED: change from gdm to lightdm and see it that hangs
 sudo dpkg-reconfigure lightdm;
 reboot;
## lightdm is also using less mem also better for the PI
## the mem usage has dropped with lightdm to 1G while gdm3 was using about 3.5G so much better 




### DEBUGING: DT hang
# ___ lightdm no mouse click or keyboard input
# it seems like the screensaver is what is broken
#
### FIXED: install xscreensaver and turn off lightdm's screensaver it's buggy with the PI maybe problems with powersaver on the PI...

 apt install xscreensaver xscreensaver-data-extra;
 systemctl restart lightdm;
#turn off light locker settings go to 
   Applications
    Settings
     Light Locker Settings ### turn it off
#turn on xscreensaver
   Applications
    Settings
     screensaver # set the mode "Blank or Only One or Ransom",  set the time "Blank After x minutes"



### DEBUGGING: wifi network down
# ___ noticed wifi interface is down overnight
# restart network
 systemctl restart NetworkManager

# wlan0 network is back up, Maybe it was the buggy light locker screensaver putting the wifi in power save mode
# wait and see...






### NEW options to figure out:



### ADD: wireguard is the VPN for UB20 apt install wireguard, and there are docker images

### ADD: the hifiberry PRO ADC/DAC and AMP when it arrives

### ADD: Plex with docker, add a better mount for the USB drive

### ADD: get the PI-4 to boot with a USB 3.0 SATA III SSD without the SD card

### ADD: swap space on the SSD for the PI

### ADD: get HomeAssistant to connect to the Honeywell/Ademco/Resdeio Vista 21IP alarm panel



